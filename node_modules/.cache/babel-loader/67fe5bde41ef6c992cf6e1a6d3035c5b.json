{"ast":null,"code":"var _jsxFileName = \"/Users/denysbondarchuk/Documents/home/front-end/CRUD/firebase-react-redux-crud/src/components/Form/Form.jsx\";\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport FormRequiredFields from './FormRequiredFields';\nimport FormNotRequiredFields from './FormNotRequiredFields';\nimport Button from '../Button';\nimport FormValidation from './FormValidation';\nimport { addItem, updateItem } from '../../store/actions';\nimport { toggleModal } from '../../store/actions/modalActions';\nimport './styles.scss'; // --------------------------------------------------------------------------------------------------------------------\n\nconst Form = () => {\n  const dispatch = useDispatch();\n  const medicalEdit = useSelector(state => state.medicalReducer.editItem);\n\n  const handleAdd = values => dispatch(addItem(values));\n\n  const handleUpdate = payload => dispatch(updateItem(payload));\n\n  const handleToggle = () => dispatch(toggleModal());\n\n  const formSubmit = medicalEdit ? handleUpdate : handleAdd;\n  const [showRequired, setShowRequired] = useState(true);\n  const handleShow = useCallback(() => {\n    setShowRequired(!showRequired);\n  }, [showRequired]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"form__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, medicalEdit ? 'Edit' : 'Add', \" medicine item \", showRequired ? '1' : '2', \"/2\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: medicalEdit ? medicalEdit : FormValidation.initialValues,\n    validationSchema: FormValidation.validationSchema,\n    onSubmit: values => formSubmit(values),\n    enableReinitialize: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, ({\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, showRequired ? /*#__PURE__*/React.createElement(FormRequiredFields, {\n    errors: errors,\n    values: values,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(FormNotRequiredFields, {\n    errors: errors,\n    values: values,\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    text: \"Cancel\",\n    variant: \"secondary\",\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    text: showRequired ? 'Next' : 'Prev',\n    variant: \"secondary\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    text: medicalEdit ? 'Edit' : 'Create',\n    variant: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/denysbondarchuk/Documents/home/front-end/CRUD/firebase-react-redux-crud/src/components/Form/Form.jsx"],"names":["React","useCallback","useState","useDispatch","useSelector","Formik","FormRequiredFields","FormNotRequiredFields","Button","FormValidation","addItem","updateItem","toggleModal","Form","dispatch","medicalEdit","state","medicalReducer","editItem","handleAdd","values","handleUpdate","payload","handleToggle","formSubmit","showRequired","setShowRequired","handleShow","initialValues","validationSchema","handleChange","handleSubmit","errors"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,qBAApC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAO,eAAP,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,WAAW,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBC,QAA/B,CAA/B;;AAEA,QAAMC,SAAS,GAAIC,MAAD,IAAYN,QAAQ,CAACJ,OAAO,CAACU,MAAD,CAAR,CAAtC;;AACA,QAAMC,YAAY,GAAIC,OAAD,IAAaR,QAAQ,CAACH,UAAU,CAACW,OAAD,CAAX,CAA1C;;AACA,QAAMC,YAAY,GAAG,MAAMT,QAAQ,CAACF,WAAW,EAAZ,CAAnC;;AAEA,QAAMY,UAAU,GAAGT,WAAW,GAAGM,YAAH,GAAkBF,SAAhD;AAEA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAMyB,UAAU,GAAG1B,WAAW,CAAC,MAAM;AACnCyB,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAF6B,EAE3B,CAACA,YAAD,CAF2B,CAA9B;AAIA,sBACE,uDACE;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,WAAW,GAAG,MAAH,GAAY,KAD1B,qBACgDU,YAAY,GAAG,GAAH,GAAS,GADrE,OADF,eAKE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAEV,WAAW,GAAGA,WAAH,GAAiBN,cAAc,CAACmB,aAD5D;AAEE,IAAA,gBAAgB,EAAEnB,cAAc,CAACoB,gBAFnC;AAGE,IAAA,QAAQ,EAAET,MAAM,IAAII,UAAU,CAACJ,MAAD,CAHhC;AAIE,IAAA,kBAAkB,EAAE,IAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,CAAC;AAAEU,IAAAA,YAAF;AAAgBC,IAAAA,YAAhB;AAA8BX,IAAAA,MAA9B;AAAsCY,IAAAA;AAAtC,GAAD,kBACC;AAAM,IAAA,QAAQ,EAAED,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIN,YAAY,gBACV,oBAAC,kBAAD;AAAoB,IAAA,MAAM,EAAEO,MAA5B;AAAoC,IAAA,MAAM,EAAEZ,MAA5C;AAAoD,IAAA,YAAY,EAAEU,YAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,gBAGV,oBAAC,qBAAD;AAAuB,IAAA,MAAM,EAAEE,MAA/B;AAAuC,IAAA,MAAM,EAAEZ,MAA/C;AAAuD,IAAA,YAAY,EAAEU,YAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALN,eAQE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,OAAO,EAAEP,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAEE,YAAY,GAAG,MAAH,GAAY,MAFhC;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,OAAO,EAAEE,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAaE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAEZ,WAAW,GAAG,MAAH,GAAY,QAF/B;AAGE,IAAA,OAAO,EAAC,WAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CARF,CAPJ,CALF,CADF;AA6CD,CA5DD;;AA8DA,eAAeF,IAAf","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\n\nimport FormRequiredFields from './FormRequiredFields';\nimport FormNotRequiredFields from './FormNotRequiredFields';\nimport Button from '../Button';\n\nimport FormValidation from './FormValidation';\nimport { addItem, updateItem } from '../../store/actions';\nimport { toggleModal } from '../../store/actions/modalActions';\nimport './styles.scss';\n\n// --------------------------------------------------------------------------------------------------------------------\n\nconst Form = () => {\n  const dispatch = useDispatch();\n  const medicalEdit = useSelector(state => state.medicalReducer.editItem);\n\n  const handleAdd = (values) => dispatch(addItem(values));\n  const handleUpdate = (payload) => dispatch(updateItem(payload));\n  const handleToggle = () => dispatch(toggleModal());\n\n  const formSubmit = medicalEdit ? handleUpdate : handleAdd;\n\n  const [showRequired, setShowRequired] = useState(true);\n  const handleShow = useCallback(() => {\n    setShowRequired(!showRequired);\n  }, [showRequired]);\n\n  return (\n    <>\n      <h2 className=\"form__title\">\n        {medicalEdit ? 'Edit' : 'Add'} medicine item {showRequired ? '1' : '2'}/2\n      </h2>\n\n      <Formik\n        initialValues={medicalEdit ? medicalEdit : FormValidation.initialValues}\n        validationSchema={FormValidation.validationSchema}\n        onSubmit={values => formSubmit(values)}\n        enableReinitialize={true}\n      >\n        {({ handleChange, handleSubmit, values, errors }) => (\n          <form onSubmit={handleSubmit}>\n            {\n              showRequired ? (\n                <FormRequiredFields errors={errors} values={values} handleChange={handleChange} />\n              ) : (\n                <FormNotRequiredFields errors={errors} values={values} handleChange={handleChange} />\n              )\n            }\n            <div className=\"form__controls\">\n              <Button\n                type=\"button\"\n                text=\"Cancel\"\n                variant=\"secondary\"\n                onClick={handleToggle}\n              />\n              <Button\n                type=\"button\"\n                text={showRequired ? 'Next' : 'Prev'}\n                variant=\"secondary\"\n                onClick={handleShow}\n              />\n              <Button\n                type=\"submit\"\n                text={medicalEdit ? 'Edit' : 'Create'}\n                variant=\"secondary\"\n              />\n            </div>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}